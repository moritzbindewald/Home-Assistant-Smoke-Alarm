blueprint:
  name: "Feueralarm Automation üî•"
  description: >
    Umfassender Feueralarm-Blueprint f√ºr Home Assistant. 
    Unterst√ºtzt Alarm-Modi, Testmodus (voll/selektiv), Pr√§senzlogik, Personengruppen, Push, Lichter/Szenen, TTS, konfigurierbare Entit√§ten, Rauchmelder-Synchronisation, Eskalationslogik, Logging/Dashboard und Notfallmodus.
  domain: automation
  input:
    # -----------------------------
    # 1Ô∏è‚É£ Alarm-Modi
    # -----------------------------
    alarm_mode:
      name: "Alarmmodus"
      description: "Initialer Alarmmodus"
      default: "Kein Alarm ‚úÖ"
      selector:
        select:
          options:
            - "Kein Alarm ‚úÖ"
            - "Alarm aktiv üö®"
            - "Notfall best√§tigt üÜò"
            - "Fehlalarm ‚ùå"

    # -----------------------------
    # 2Ô∏è‚É£ Testmodus
    # -----------------------------
    test_mode:
      name: "Testmodus aktivieren üß™"
      description: "Aktiviere Testmodus"
      default: false
      selector:
        boolean: {}

    test_mode_duration:
      name: "Testmodus Dauer"
      description: "Wie lange der Testmodus aktiv bleibt"
      default: "00:30:00"
      selector:
        duration: {}

    test_mode_full_program:
      name: "Volles Testprogramm"
      description: "F√ºhrt alle Aktionen wie im echten Alarm aus"
      default: true
      selector:
        boolean: {}

    # -----------------------------
    # 3Ô∏è‚É£ Pr√§senz-Erkennung
    # -----------------------------
    presence_sensors:
      name: "Pr√§senzsensoren üë•"
      description: "Binary Sensoren f√ºr Bewegung/T√ºren/Fenster"
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    persons:
      name: "Personen zu Hause"
      description: "Personen-Entities"
      selector:
        entity:
          domain: person
          multiple: true

    # -----------------------------
    # 4Ô∏è‚É£ Personengruppen
    # -----------------------------
    residents_group:
      name: "Bewohner üë™"
      selector:
        entity:
          domain: group
    emergency_contacts:
      name: "Notfallkontakte üë™"
      selector:
        entity:
          domain: group

    # -----------------------------
    # 5Ô∏è‚É£ Push-Benachrichtigungen
    # -----------------------------
    push_service:
      name: "Push-Service üì≤"
      selector:
        action:

    # -----------------------------
    # 6Ô∏è‚É£ Beleuchtung / Szenen
    # -----------------------------
    alarm_lights:
      name: "Alarm-Lichter üî¥"
      selector:
        entity:
          domain: light
          multiple: true

    escape_lights:
      name: "Fluchtweg üü¢"
      selector:
        entity:
          domain: light
          multiple: true

    emergency_lights:
      name: "Notfallbeleuchtung ‚ö™"
      selector:
        entity:
          domain: light
          multiple: true

    # -----------------------------
    # 7Ô∏è‚É£ TTS
    # -----------------------------
    tts_speakers:
      name: "TTS-Speaker üó£Ô∏è"
      selector:
        entity:
          domain: media_player
          multiple: true

    # -----------------------------
    # 8Ô∏è‚É£ Konfigurierbare Entit√§ten
    # -----------------------------
    custom_entities:
      name: "Konfigurierbare Entit√§ten ‚öôÔ∏è"
      selector:
        entity:
          multiple: true

    # -----------------------------
    # 9Ô∏è‚É£ Rauchmelder
    # -----------------------------
    smoke_detectors:
      name: "Rauchmelder üåê"
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    smoke_buzzer_mode:
      name: "Buzzer-Modus"
      default: "buzzer_alarm"
      selector:
        select:
          options:
            - "buzzer_select"
            - "buzzer_alarm"
            - "buzzer_mute"

    # -----------------------------
    # üîü Eskalationslogik
    # -----------------------------
    escalation_delay:
      name: "Zeit bis Eskalation ‚ö†Ô∏è"
      default: "00:02:00"
      selector:
        duration: {}

    # -----------------------------
    # 1Ô∏è‚É£1Ô∏è‚É£ Logging & Dashboard
    # -----------------------------
    logbook_entity:
      name: "Logbuch-Entity üìä"
      selector:
        entity:
          domain: input_text

    dashboard_entity:
      name: "Dashboard-Status-Entity"
      selector:
        entity:
          domain: input_text

    # -----------------------------
    # 1Ô∏è‚É£2Ô∏è‚É£ Notfallmodus
    # -----------------------------
    emergency_button:
      name: "Notfallmodus aktivieren üèÉ‚Äç‚ôÇÔ∏è"
      selector:
        entity:
          domain: input_boolean

variables:
  alarm_active: "{{ states(alarm_mode) != 'Kein Alarm ‚úÖ' }}"
  anyone_home: >
    {{ states('persons') | selectattr('state','eq','home') | list | length > 0 }}
  test_active: "{{ is_state(test_mode, 'on') }}"

trigger:
  - platform: state
    entity_id: !input alarm_mode
  - platform: state
    entity_id: !input test_mode
  - platform: state
    entity_id: !input emergency_button
    to: "on"

condition: []

action:
  - choose:
      # -----------------------------
      # Testmodus aktiv
      # -----------------------------
      - conditions:
          - "{{ test_active }}"
        sequence:
          - choose:
              - conditions:
                  - "{{ test_mode_full_program }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        - !input alarm_lights
                        - !input escape_lights
                        - !input emergency_lights
                  - service: tts.google_say
                    target:
                      entity_id: !input tts_speakers
                    data:
                      message: "Testmodus: Alle Alarmaktionen aktiviert."
                  - service: !input push_service
                    data:
                      message: "Testmodus: Vollprogramm"
              - conditions: []
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input alarm_lights
                  - service: tts.google_say
                    target:
                      entity_id: !input tts_speakers
                    data:
                      message: "Testmodus: Selektive Aktionen"
                  - service: !input push_service
                    data:
                      message: "Testmodus: Selektiv"
          - delay: !input test_mode_duration
          - service: light.turn_off
            target:
              entity_id:
                - !input alarm_lights
                - !input escape_lights
                - !input emergency_lights
          - service: tts.google_say
            target:
              entity_id: !input tts_speakers
            data:
              message: "Testmodus beendet"

      # -----------------------------
      # Notfallmodus manuell
      # -----------------------------
      - conditions:
          - "{{ is_state(trigger.entity_id,'on') and trigger.entity_id == !input emergency_button }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id:
                - !input alarm_lights
                - !input escape_lights
                - !input emergency_lights
          - service: tts.google_say
            target:
              entity_id: !input tts_speakers
            data:
              message: "Notfallmodus aktiviert!"
          - service: !input push_service
            data:
              message: "Notfallmodus aktiviert üèÉ‚Äç‚ôÇÔ∏è"

      # -----------------------------
      # Normaler Alarmmodus
      # -----------------------------
      - conditions:
          - "{{ alarm_active and not test_active }}"
        sequence:
          - choose:
              - conditions:
                  - "{{ states(alarm_mode) == 'Alarm aktiv üö®' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        - !input alarm_lights
                        - !input escape_lights
                        - !input emergency_lights
                  - service: tts.google_say
                    target:
                      entity_id: !input tts_speakers
                    data:
                      message: "Feueralarm! Bitte beachten Sie die Sicherheitsma√ünahmen."
                  - service: !input push_service
                    data:
                      message: "Alarm aktiv üö®"
                  - repeat:
                      until:
                        - condition: state
                          entity_id: !input alarm_mode
                          state: "Notfall best√§tigt üÜò"
                      sequence:
                        - delay: !input escalation_delay
                        - service: !input push_service
                          data:
                            message: "Eskalation: Alarm weiterhin aktiv üö®"

              - conditions:
                  - "{{ states(alarm_mode) == 'Notfall best√§tigt üÜò' }}"
                sequence:
                  - service: !input push_service
                    data:
                      message: "Notfall best√§tigt üÜò"
                  - service: light.turn_on
                    target:
                      entity_id:
                        - !input alarm_lights
                        - !input escape_lights
                        - !input emergency_lights

              - conditions:
                  - "{{ states(alarm_mode) == 'Fehlalarm ‚ùå' }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id:
                        - !input alarm_lights
                        - !input escape_lights
                        - !input emergency_lights
                  - service: tts.google_say
                    target:
                      entity_id: !input tts_speakers
                    data:
                      message: "Fehlalarm aufgehoben."

mode: single