blueprint:
  name: "Rauchmelder Alarm üî• Vollst√§ndig + Testmodus + Manueller Alarm + Stummschalten"
  description: >
    üö® Vollst√§ndig konfigurierbare Rauchmelder-Alarmautomation f√ºr Home Assistant

    **Features:**  
    üîπ Basisalarm: Lichter, Rollos, Sirenen / TTS  
    üîπ Friendly Names f√ºr Rauchmelder  
    üîπ Raumerkennung / Sensorraum-Mapping  
    üîπ Testmodus: Einzelentit√§t, Volltest, alle Rauchmelder  
    üîπ Manueller Alarm / Trigger flexibel  
    üîπ Wiederholungsalarm / Reminder  
    üîπ Flexible Stummschaltung / Buzzer-Option  
    üîπ Pr√§senzabh√§ngige Aktionen & Anzeige  
    üîπ Monitoring w√§hrend Alarm

  domain: automation

  input:
    # --- Rauchmelder ---
    smoke_sensors:
      name: "Rauchmelder *"
      description: "Liste der zu √ºberwachenden Rauchmelder"
      selector:
        entity:
          domain: binary_sensor
          device_class: smoke
          multiple: true

    smoke_sensor_friendly_names:
      name: "Friendly Names"
      description: "Optional: Friendly Names f√ºr Rauchmelder"
      default: {}
      selector:
        object: {}

    smoke_sensor_rooms:
      name: "R√§ume"
      description: "Optional: Rauchmelder bestimmten R√§umen zuordnen"
      default: {}
      selector:
        object: {}

    # --- Alarmger√§te ---
    lights:
      name: "üí° Lichter"
      description: "Lichter bei Alarm"
      default: []
      selector:
        entity:
          domain: light
          multiple: true

    covers:
      name: "ü™ü Rollos"
      description: "Rollos bei Alarm"
      default: []
      selector:
        entity:
          domain: cover
          multiple: true

    sirens:
      name: "üîä Sirenen"
      description: "Ger√§te, die T√∂ne abspielen"
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_message:
      name: "üó£Ô∏è TTS Nachricht"
      description: "Nachricht f√ºr Lautsprecher / Alexa"
      default: "Rauchalarm! Bitte pr√ºfen Sie die Rauchmelder."
      selector:
        text: {}

    notify_target:
      name: "üì© Benachrichtigung"
      description: "Optional: Push-Empf√§nger"
      default: []
      selector:
        target: {}

    include_home_status_in_notification:
      name: "üè† Anwesenheitsstatus anzeigen"
      description: "Zeigt, wer zuhause ist"
      default: true
      selector:
        boolean: {}

    presence_sensors:
      name: "üë• Pr√§senzsensoren"
      description: "Optional: Sensoren f√ºr Anwesenheit"
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    duration:
      name: "‚è±Ô∏è Alarmdauer (Minuten)"
      default: 15
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "Minuten"

    wait_timeout:
      name: "‚è≥ Wartezeit auf Nutzerbest√§tigung (Minuten)"
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "Minuten"

    continue_on_timeout:
      name: "Alarm bei Timeout weiterlaufen lassen"
      default: true
      selector:
        boolean: {}

    repeat_alarm:
      name: "üîÅ Wiederholungsalarm"
      description: "Benachrichtigung nach Timeout erneut"
      default: true
      selector:
        boolean: {}

    watch_devices:
      name: "Ger√§te √ºberwachen"
      description: "Ger√§te, die w√§hrend Alarm √ºberwacht werden"
      default: []
      selector:
        entity:
          multiple: true

    # --- Stummschaltung / Buzzer ---
    mute_device:
      name: "üîï Ger√§t zum Stummschalten"
      default: ""
      selector:
        device: {}

    mute_method:
      name: "Mute-Methode"
      default: "select_option"
      selector:
        select:
          options:
            - "select_option"
            - "turn_off"
            - "service_call"

    # --- Testmodus ---
    test_mode:
      name: "üß™ Testmodus"
      default: "aus"
      selector:
        select:
          options:
            - "aus"
            - "nur_benachrichtigung"
            - "nur_lichter"
            - "nur_rollos"
            - "nur_sirenen"
            - "einzelentitaet"
            - "alle_rauchmelder"
            - "volltest"

    test_entity:
      name: "Einzelentit√§t testen"
      default: ""
      selector:
        entity:
          multiple: false

    trigger_all_sensors:
      name: "Alle Rauchmelder ausl√∂sen"
      default: false
      selector:
        boolean: {}

    # --- Manueller Alarm ---
    manual_trigger_entity:
      name: "Ger√§t/Entit√§t f√ºr manuellen Alarm"
      default: ""
      selector:
        entity:
          multiple: false

    manual_trigger_mode:
      name: "Manueller Alarm-Modus"
      default: "select_option"
      selector:
        select:
          options:
            - "select_option"
            - "turn_on"
            - "service_call"

trigger:
  - platform: state
    entity_id: !input smoke_sensors
    to: "on"

condition: []

action:
  - variables:
      smoke_names: !input smoke_sensor_friendly_names
      smoke_rooms: !input smoke_sensor_rooms
      persons_home: >
        {% set ph = states.person | selectattr('state','eq','home') | map(attribute='name') | list %}
        {{ ph }}
      sensors_active: >
        {% set sa = states | selectattr('entity_id','in', presence_sensors) | selectattr('state','eq','on') | list %}
        {{ sa }}
      someone_home: "{{ (persons_home | length > 0) or (sensors_active | length > 0) }}"
      monitored_devices: !input watch_devices
      alarm_active: true
      notified: false
      lights_prev_state: >
        {% set states_dict = {} %}
        {% for l in lights %}
          {% set states_dict = states_dict | combine({l: states(l)}) %}
        {% endfor %}
        {{ states_dict }}
      covers_prev_state: >
        {% set states_dict = {} %}
        {% for c in covers %}
          {% set states_dict = states_dict | combine({c: states(c)}) %}
        {% endfor %}
        {{ states_dict }}

  # --- Testmodus ---
  - choose:
      - conditions: "{{ test_mode != 'aus' }}"
        sequence:
          - variables:
              sensors_to_trigger: >
                {% if trigger_all_sensors %}
                  {{ smoke_sensors }}
                {% elif test_mode == 'einzelentitaet' and test_entity != '' %}
                  ["{{ test_entity }}"]
                {% else %}
                  ["{{ trigger.entity_id }}"]
                {% endif %}
          - repeat:
              for_each: "{{ sensors_to_trigger }}"
              sequence:
                - variables:
                    current_sensor: "{{ repeat.item }}"
                - choose:
                    - conditions: "{{ test_mode in ['nur_benachrichtigung','volltest'] }}"
                      sequence:
                        - service: notify.notify
                          data:
                            message: "üí¨ Test: {{ smoke_rooms.get(current_sensor,'Unbekannter Raum') }}: {{ smoke_names.get(current_sensor,current_sensor) }}"
                            target: !input notify_target
                    - conditions: "{{ test_mode in ['nur_lichter','volltest'] }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: !input lights
                          data:
                            brightness_pct: 100
                    - conditions: "{{ test_mode in ['nur_rollos','volltest'] }}"
                      sequence:
                        - service: cover.open_cover
                          target:
                            entity_id: !input covers
                    - conditions: "{{ test_mode in ['nur_sirenen','volltest'] }}"
                      sequence:
                        - service: tts.google_translate_say
                          target:
                            entity_id: !input sirens
                          data:
                            message: !input tts_message

  # --- Manueller Alarm ---
  - choose:
      - conditions: "{{ manual_trigger_entity != '' }}"
        sequence:
          - service: >
              {% if manual_trigger_mode == 'turn_on' %}
                homeassistant.turn_on
              {% elif manual_trigger_mode == 'service_call' %}
                script.trigger_manual_alarm
              {% else %}
                homeassistant.turn_on
              {% endif %}
            target:
              entity_id: "{{ manual_trigger_entity }}"
          - service: notify.notify
            data:
              message: "üí¨ Manueller Alarm ausgel√∂st: {{ smoke_names.get(manual_trigger_entity, manual_trigger_entity) }}"
              target: !input notify_target

  # --- Standard-Alarm + Stummschalten ---
  - choose:
      - conditions: "{{ test_mode in ['aus','volltest'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input lights
            data:
              brightness_pct: 100
          - service: cover.open_cover
            target:
              entity_id: !input covers
          - service: tts.google_translate_say
            target:
              entity_id: !input sirens
            data:
              message: !input tts_message
          - service: notify.notify
            data:
              message: >
                Rauchalarm! {{ smoke_names | default('Unbekannte Sensoren') }} ausgel√∂st
              target: !input notify_target
          - choose:
              - conditions: "{{ mute_device != '' }}"
                sequence:
                  - choose:
                      - conditions: "{{ mute_method == 'turn_off' }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target:
                              entity_id: !input mute_device
                      - conditions: "{{ mute_method == 'service_call' }}"
                        sequence:
                          - service: script.mute_device_service
                            data:
                              device: !input mute_device
                      - conditions: "{{ mute_method == 'select_option' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: !input mute_device
                            data:
                              option: "stumm"

  # --- Wiederholungsalarm ---
  - choose:
      - conditions: "{{ repeat_alarm }}"
        sequence:
          - delay: "00:{{ wait_timeout }}:00"
          - service: notify.notify
            data:
              message: "üîÅ Wiederholungsalarm: {{ smoke_names | default('Unbekannte Sensoren') }}"
              target: !input notify_target